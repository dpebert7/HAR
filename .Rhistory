train.treeresult
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,], type = "class")
walkerY = as.factor(rbind(subject_train, subject_test))
walkerY = as.factor(as.data.frame(rbind(subject_train, subject_test)))
walkerY.sample
class(walkerY.sample)
as.factor(walkerY.sample)
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,], type = "class")
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,], type = "class")
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,])
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
train = sample(length(walkerY.sample), length(walkerY.sample)*.7))
train = sample(length(walkerY.sample), length(walkerY.sample)*.7))
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,])
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
walkerY.sample[train]
train.treepred
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,], type = "class")
help(rpart)
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
train.treeresult
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
train.treeresult
test.treeresult
table(walkerY.sample)
table(walkerY.sample[train])
table(walkerY.sample[-train])
n = 10
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 15
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 10
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 15
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 20
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
n = 25
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
test.treeresult$accuracy
smallAccVector = 1:10
mean(smallAccVector)
maxWalkers = 5
nIterations = 3
maxWalkers = 5
nIterations = 3
bigAccVector = 1:maxWalkers
set.seed(1)
for i in (1:maxWalkers){
smallAccVector = 1:nIterations
for j in(1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
i
j
maxWalkers = 5
nIterations = 3
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 1:maxWalkers){
smallAccVector = 1:nIterations
for(j in1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
smallAccVector
smallAccVector[1]=10
smallAccVector
maxWalkers = 5
nIterations = 3
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 1:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
i
j
for(i in 1:maxWalkers){}
for(i in 1:maxWalkers){print(i)}
walkerID= sample(30,i)
maxWalkers = 5
nIterations = 3
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
n = 1
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
maxWalkers = 10
nIterations = 5
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector)
maxWalkers = 5
nIterations = 1
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector)
plot(bigAccVector,
xlab = Number of walkers)
xlab = "Number of walkers")
plot(bigAccVector,
xlab = "Number of walkers")
plot(bigAccVector,
xlab = "Number of walkers",
ylab = "Average accuracy of tree model",
main = "This is a title")
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Model",
main = "Trees: Number of Walkers vs. Model Accuracy")
maxWalkers = 20
nIterations = 1
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Model",
main = "Trees: Number of Walkers vs. Model Accuracy")
maxWalkers = 5
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 10 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
maxWalkers = 29
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
maxWalkers = 5
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 10 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
maxWalkers = 29
nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
finalAccVector = c(bigAccVector, 49.92)
finalAccVector
finalAccVector = c(bigAccVector, 0.4992)
finalAccVector
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
test.treeresult$matrix
a = matrix(1:20, nrow = 5, ncol = 4)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
install.packages("gridExtra")
write.csv(test.treeresult$matrix, file = "30walkers.csv")
write.table(test.treeresult$matrix, file = "30walkers.csv")
write.table(test.treeresult$matrix, file = "30walkers.csv", sep = ",")
n = 10
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
write.table(test.treeresult$matrix, file = "tenWalkers.csv", sep = ",")
