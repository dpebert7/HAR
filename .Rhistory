xlab = "Number of walkers")
plot(bigAccVector,
xlab = "Number of walkers")
plot(bigAccVector,
xlab = "Number of walkers",
ylab = "Average accuracy of tree model",
main = "This is a title")
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Model",
main = "Trees: Number of Walkers vs. Model Accuracy")
maxWalkers = 20
nIterations = 1
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Model",
main = "Trees: Number of Walkers vs. Model Accuracy")
maxWalkers = 5
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 10 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
maxWalkers = 29
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
bigAccVector[i] = mean(smallAccVector)
}
maxWalkers = 5
nIterations = 10
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 10 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
maxWalkers = 29
nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
plot(bigAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
finalAccVector = c(bigAccVector, 49.92)
finalAccVector
finalAccVector = c(bigAccVector, 0.4992)
finalAccVector
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
test.treeresult$matrix
a = matrix(1:20, nrow = 5, ncol = 4)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
install.packages("gridExtra")
write.csv(test.treeresult$matrix, file = "30walkers.csv")
write.table(test.treeresult$matrix, file = "30walkers.csv")
write.table(test.treeresult$matrix, file = "30walkers.csv", sep = ",")
n = 10
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.treepred = predict(tree, newdata = walkerX.sample[train,], type = "class")
train.treeresult = confmatrix(walkerY.sample[train], train.treepred)
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
test.treeresult
write.table(test.treeresult$matrix, file = "tenWalkers.csv", sep = ",")
n = 5
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
library(e1071)
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmeresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmpred
train.svmresult
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmeresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmpresult
train.svmeresult
test.svmpred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
train.svmeresult
test.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
# Accuracy with 3 walkers:
test.svmresult
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmeresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
train.svmresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
maxWalkers = 5
nIterations = 3
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
smallAccVector[j] = test.svmresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
finalAccVector = c(bigAccVector, 0.4992) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
maxWalkers = 5
nIterations = 3
#maxWalkers = 29
#nIterations = 8
bigAccVector = 1:maxWalkers
bigAccVector
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
smallAccVector[j] = test.svmresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
finalAccVector = c(bigAccVector) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
help(svm)
X_train
maxWalkers = 5
nIterations = 3
#maxWalkers = 29
#nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
smallAccVector[j] = test.svmresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
X_train$V64
n = 3
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
n = 5
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
n = 10
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
n = 30
set.seed(1)
walkerID= sample(30,n)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# svm model
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
train.svmpred = predict(svmModel, newdata = walkerX.sample[train,], type = "class")
train.svmresult = confmatrix(walkerY.sample[train], train.svmpred)
train.svmresult
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
test.svmresult
maxWalkers = 10
nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
smallAccVector[j] = test.svmresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
finalAccVectorSVM = c(bigAccVector, 0.9496) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
bigAccVector
finalAccVectorSVM = c(bigAccVector, 0.9496) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
plot(finalAccVector,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
finalAccVectorSVM = c(bigAccVector, 0.9496) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
maxWalkers = 29
nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
svmModel = svm(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.svmpred = predict(svmModel, newdata = walkerX.sample[-train,], type = "class")
test.svmresult = confmatrix(walkerY.sample[-train], test.svmpred)
smallAccVector[j] = test.svmresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
finalAccVectorSVM = c(bigAccVector, 0.9496) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "Trees: Number of Walkers vs Model Accuracy")
plot(finalAccVectorTREE,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy")
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Tree Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy")
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Model Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy",
type = "l")
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Model Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy",
type = "l"
color = "red")
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Model Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy",
type = "l"
col = "red")
plot(finalAccVectorSVM,
xlab = "Number of Walkers Compared",
ylab = "Average Accuracy of Model Over 8 Iterations",
main = "SVM: Number of Walkers vs Model Accuracy",
type = "l",
col = "red")
maxWalkers = 29
nIterations = 8
bigAccVector = 1:maxWalkers
set.seed(1)
for(i in 2:maxWalkers){
smallAccVector = 1:nIterations
for(j in 1:nIterations){
walkerID= sample(30,i)
walkerX.sample = walkerX[walkerY %in% walkerID,]
walkerY.sample = as.factor(walkerY[walkerY %in% walkerID])
# 70% training and 30% test data
train = sample(length(walkerY.sample), length(walkerY.sample)*.7)
# rpart tree
library(rpart)
tree = rpart(walkerY.sample[train] ~., data = walkerX.sample[train,])
test.treepred = predict(tree, newdata = walkerX.sample[-train,], type = "class")
test.treeresult = confmatrix(walkerY.sample[-train], test.treepred)
smallAccVector[j] = test.treeresult$accuracy
}
print(i)
bigAccVector[i] = mean(smallAccVector)
}
bigAccVector
finalAccVectorTREE = c(bigAccVector, 0.4992) #Note that the case of 30 walkers is the same no matter which 30 are chosen...
